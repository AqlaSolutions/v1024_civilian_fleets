<?xml version="1.0" encoding="utf-8"?>
<!--
[Obsolete("", true)]
Given the commander of a wing,
1. Removes all recognized wing tags present in the wing's name
2. Checks if the commander is running a civilian fleet command
3. If [2] returns true, appends the appropriate wing tag to the wing name
-->
<aiscript name="lib.civfleet.update.wingname" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
    <params>
        <param name="wingCommander" default="this.assignedcontrolled.commander" comment="The commander of the (civilian fleet) wing whose wing's name requires updating according to the civ-fleet role.."/>
    </params>
    <attention min="unknown">
        <actions>
            <do_if value="$wingCommander == null">
                <show_help custom="'Wing Commander is null!'" position="1" duration="3s" />
                <!-- Supplied commander is null. Nothing to do. -->
                <resume label="return"/>
            </do_if>
            <!--
            <show_help custom="'Let us rename.'" position="1" duration="3s" />
            -->

            <!-- Rename Wings. Based on code by kspn at Mod Forum: https://forum.egosoft.com/viewtopic.php?f=181&t=410087&start=15#p4810686 -->
            <set_value name="$civFleet_CmdTagPairs" exact="global.$civFleet_CmdTagPairs" />

            <!-- Remove existing tags, and determine the correct tag to append -->
            <substitute_text source="$wingCommander.wing.name" text="$originalWingName">
                <replace string="' %1'.[$civFleet_CmdTagPairs.{1}.{1}]" with="''" />
            </substitute_text>
            <set_value name="$appendingWingName" exact="''" />
            <do_all exact="$civFleet_CmdTagPairs.count" counter="$i">
                <!-- Repeatedly extract the original wing name -->
                <!-- Final result when exiting loop: a string of the original "Wing XX" format. -->
                <substitute_text text="$originalWingName">
                    <replace string="' %1'.[$civFleet_CmdTagPairs.{$i}.{1}]" with="''" />
                </substitute_text>

                <do_if value="($wingCommander.defaultorder.id == $civFleet_CmdTagPairs.{$i}.{1})">
                    <set_value name="$appendingWingName" exact="' %1'.[$civFleet_CmdTagPairs.{$i}.{2}]" />
                    <!-- Not breaking, such that commands down the list can also be checked. -->
                </do_if>
            </do_all>
            
            <!-- Actually setting the new wing name -->
            <set_object_wing_name object="$wingCommander" name="'%1%2'.[$originalWingName, $appendingWingName]" />

            <label name="return"/>
        </actions>
    </attention>
</aiscript><?xml version="1.0" encoding="utf-8" ?>
<!--
Whenever an L or XL ship attempts to recall its subordinates, exclude civilian fleet members to be recalled.
This should prevent S or M members from being unreasonably recalled by L or XL fleet leaders.
Does not consider XS members, since they are drones, and drones should follow their commanders' orders at all times.
-->
<diff>
    <add sel="/aiscripts[@name='lib.recall.subordinates']/attention/actions/do_else[1]" pos="before">
        <!-- Sanity check: subordinate is not a drone (i.e. class is not XS) -->
        <!-- Verify: subordinate is a member of the civ-fleet -->
        <set_value name="$currentSubordinate" exact="$subordinates.{$i}" />
        <do_elseif value="(not $currentSubordinate.isclass.ship_xs) and ($currentSubordinate.assignment == assignment.trade or $currentSubordinate.assignment == assignment.mining)">
            <remove_from_group group="$subordinates" object="currentSubordinate" />
        </do_elseif>
    </add>
</diff><?xml version="1.0" encoding="utf-8" ?>
<!-- 
Whenever a ship tries to obtain "first" orders...
1. Because it has just been freshly constructed (NOT OUR MAIN POINT)
2. Because it has just received a new assignment
Do:
1. Check if it is a ship-to-ship assignment (passively checked as a result of original code structure)
2. Check if it is being assigned to another ship running a recognized civilian command
3. If [2] returns true, syncs the civilian command from the commander to itself
4. If [2] returns true, also updates the wing name appropriately
-->
<diff>
    <add sel="/aiscript[@name='lib.request.orders']/attention/actions/do_else/do_else" pos="before">
        <!-- At this point, definitely assigning to another ship, no need to double-check. -->
        <!-- Check: civilian fleet -->
        <do_elseif value="$assignment == assignment.trade or $assignment == assignment.mining">
            <set_value name="$flag_v1024_civfleetformed" exact="true" comment="Actual value not important." />
            <!-- Delegate to standardized static config method to ensure save-game compatibility. -->
            <signal_objects object="player.galaxy" param="global.$v1024_symbols_requestOrderSync" param2="$commander" param3="$object" />
        </do_elseif>
    </add>

    <!-- Rename wing if wing is civilian fleet -->
    <add sel="/aiscript[@name='lib.request.orders']/attention/actions/do_else/do_else" pos="after">
        <!-- Optimization: only attempt to rename fleet when we have actually formed any civ-fleets. -->
        <do_if value="$flag_v1024_civfleetformed?">
            <!-- Only the player can initiate illegal assignment as trader or miner. So we're pretty safe. -->
            <!-- Delegate to standardized static fleet wing rename method. -->
			<!-- Using run_script because this operation should take an instant, and no player would be quick enough to save the game while the assignment is in progress. -->
            <run_script name="'lib.civfleet.update.wingname'">
                <param name="wingCommander" value="$commander" />
            </run_script>
        </do_if>
    </add>
</diff><?xml version="1.0" encoding="utf-8" ?>

<!-- When civilian fleet commander docks, synchronize default orders: -->
<!-- Commander broadcasts updated orders to all subordinates. -->
<!-- Apparently, only the original MTF code works, so I am copying them over here. -->
<!-- If possible, I hope to rewrite the entire logic with my style and stuff, but well. -->
<!--
Note to self:
This script uses $thisship instead of $object, to account for the cases where
Betty docks for the player via Auto-Pilot.
-->
<diff>
    <add sel="/aiscript/attention[@min='unknown']/actions/set_command[@command='command.dockat']" pos="after">
        <!-- There are currently two ways of syncing. -->
        <!-- 1. Commander docks and broadcasts (maybe-updated) orders to subordinates (confirming that the TradeRoutine order is doable (assuming no playr intervention)) -->
        <!-- 2. Subordinate docks and obtains (maybe-updated) orders from commander (during usual trading, when the commander probably has not docked yet to execute [1].) -->
        
        <!-- Of course, if this ain't player-owned, we have nothing to discuss. -->
        <do_if value="$thisship.isplayerowned">
            <!-- Stations can't dock at somewhere else, so we do not need to check for stations. -->

            <!-- Set up variables. -->
            <set_value name="$commanderObject" exact="$thisship.commander" />
            <set_value name="$civFleet_CmdTagPairs" exact="global.$civFleet_CmdTagPairs" />

            <!-- However, ships may have stations as their commanders. -->
            <!-- Check condition 2 first such that middle-commanders may obtain updated commands first before broadcsating. -->
            <do_if value="$commanderObject != null and $commanderObject.isclass.ship">
                <!-- Might be civilian subordinate of a civ-fleet. -->
                <set_value name="$assignmentObj" exact="$thisship.assignment" />
                <do_if value="$assignmentObj == assignment.trade or $assignmentObj == assignment.mining">
                    <!-- It is indeed a subordinate of a certain civilian fleet. -->
                    <!-- Sync from commander. -->
                    <debug_text text="'Civ Fleet beginning sync: pull initiated by Subordinate ' + $thisship.knownname" />
                    <!-- Delegate to standardized static config method to ensure save-game compatibility. -->
                    <signal_objects object="player.galaxy" param="global.$v1024_symbols_requestOrderSync" param2="$commanderObject" param3="$thisship" />
                </do_if>
            </do_if>
            <!-- Check condition 1: Commander-ship -->
            <do_if value="$thisship.subordinates.count">
                <!-- The original mod specifically mentioned allowing middle-commanders to lead civilian fleets. -->
                <do_all exact="$civFleet_CmdTagPairs.count" counter="$i">
                    <!-- Determine civilian fleet commander -->
                    <do_if value="$thisship.defaultorder.id == $civFleet_CmdTagPairs.{$i}.{1}">
                        <!-- Fleet commander detected. -->
                        <debug_text text="'Civ Fleet beginning sync: broadcast from Commander ' + $thisship.knownname" />
                        <!-- Summon all subordinates, and sync orders. -->
                        <set_value name="$allSubordinates" exact="$thisship.subordinates" />
                        <do_all exact="$allSubordinates.count" counter="$i">
                            <set_value name="$currentSubordinate" exact="$allSubordinates.{$i}" />
                            <set_value name="$currentSubAssignObj" exact="$currentSubordinate.assignment" />
                            <do_if value="$currentSubAssignObj == assignment.trade or $currentSubAssignObj == assignment.mining">
                                <!-- Delegate to standardized static config method to ensure save-game compatibility. -->
                                <signal_objects object="player.galaxy" param="global.$v1024_symbols_requestOrderSync" param2="$thisship" param3="$allSubordinates.{$i}" />
                            </do_if>
                        </do_all>

                        <debug_text text="'Synchronization complete for Commander ' + $thisship.knownname" />
                    </do_if>
                </do_all>
            </do_if>
        </do_if>
    </add>
</diff>
-- Powered by Right Click API
local ffi = require("ffi")
local C = ffi.C

local function initialize()
    DebugError("V1024 Civilian Fleets, UI component starting.")

    capi.RegisterAssignAction(V1024CF_CivilianAssignment)
end

function V1024CF_CivilianAssignment(menu)
    -- We need to verify whether the assignment is valid, before allowing the game to add in interaction contents.
    if menu.numassignableships > 0 then
        --[[
        Mining ships can be assigned to other mining ships as Mining/Trading ship
        Trading ships can only be assigned to other Trading ships as Trading only
        (Currently we don't have hybrid-storage ships, but just be prepared.)
        ]]--

        if (not C.IsComponentClass(menu.componentSlot.component, "station")) then
            -- The mod only applies when assigning to ships.
            
            local convertedComponent = ConvertStringTo64Bit(tostring(menu.componentSlot.component))
            local commanderCanMine = (GetComponentData(convertedComponent, "primarypurpose") == "mine")
            -- Intuitive.
            local selectedMiningShips = (menu.numassignableminingships > 0)
            -- It is known that Mining Ships are a subset of All Ships.
            -- Also, Mining and Trading are currently mutually-exclusive (v2.5).
            -- We can use this condition to easily check the presense of trading ships.
            local selectedTradingShips = (menu.numassignableships > menu.numassignableminingships)

            local enableMiningFleet = (commanderCanMine and selectedMiningShips)
            local enableTradingFleet = (((not commanderCanMine) and selectedTradingShips) or enableMiningFleet)

            -- Feature not unlocked yet.
            --enableMiningFleet = false

            --[[
                If Commander can mine, and we have selected some mining ships, then enable "Mining Fleet" *and* "Trading Fleet".
                We just do not know whether the Commander is running a trade script
                    (or so I may think, with my limited knowledge of the underlying UI language)
                If Commander cannot mine, and we have selected some non-mining ships, then enable "Trading Fleet".
            ]]--

            --menu.insertInteractionContent("selected_assignments", { type = actiontype, text =  "[" .. ReadText(1001, 7814) .. "] " .. ReadText(20208, 40303), text2 = Helper.convertColorToText(menu.holomapcolor.playercolor) .. ((menu.numassignableships == 1) and ReadText(1001, 7851) or string.format(ReadText(1001, 7801), menu.numassignableships)), script = function () menu.buttonAssignCommander("defence") end })
            menu.insertInteractionContent("selected_assignments", { type = actiontype, text = "Form/join trading fleet", text2 = Helper.convertColorToText(menu.holomapcolor.playercolor) .. ((menu.numassignableships == 1) and ReadText(1001, 7851) or string.format(ReadText(1001, 7801), menu.numassignableships)), script = function () menu.buttonAssignCommander("trade") end, active = enableTradingFleet })
            menu.insertInteractionContent("selected_assignments", { type = actiontype, text = "Form/join mining fleet", text2 = Helper.convertColorToText(menu.holomapcolor.playercolor) .. ((menu.numassignableships == 1) and ReadText(1001, 7851) or string.format(ReadText(1001, 7801), menu.numassignableships)), script = function () menu.buttonAssignCommander("mining") end, active = enableMiningFleet })
            --menu.insertInteractionContent("selected_assignments", { type = actiontype, text = "Form/join mining fleet", text2 = tostring(commanderCanMine) .. " " .. tostring(selectedMiningShips), script = function () menu.buttonAssignCommander("mining") end, active = enableMiningFleet })
        end
	end
end

initialize()<?xml version="1.0" encoding="utf-8" ?>
<mdscript name="CivilianFleets_Signals" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
    <cues>
        <cue name="SignalConfigurationControl" instantiate="true">
            <conditions>
                <event_cue_signalled cue="md.Setup.Start" />
            </conditions>
            <actions>
                <set_value name="global.$v1024_symbols_shipDocked" value="'ship docked'" />
                <set_value name="global.$v1024_symbols_requestOrderSync" value="'requesting order sync'" />
                <set_value name="global.$v1024_symbols_requestUpdateWingName" value="'requesting update wing name'" />
            </actions>

            <cues>
              
            </cues>
        </cue>

        <!--
        Given two ships, copies the civilian default order of one ship to the other ship.
        The type of order to sync depends on the assignment.
            param1 = That Characteristic Symbol
            param2 = fromShip
            param3 = toShip
        -->
        <cue name="Signal_SyncOrders" instantiate="true">
            <conditions>
                <event_object_signalled object="player.galaxy" param="global.$v1024_symbols_requestOrderSync" />
            </conditions>
            <actions>
                <set_value name="$fromShip" exact="event.param2" />
                <set_value name="$toShip" exact="event.param3" />

                <do_if value="$fromShip == null or $toShip == null">
                    <show_help custom="'Source and/or target be null! Cannot sync!'" position="1" duration="3s" chance="0" />
                    <cancel_cue cue="this" />
                </do_if>

                <!--
                <show_help custom="'Tryna sync from ' + $fromShip.knownname + ' to ' + $toShip.knownname" position="1" duration="3s" />
                -->

                <do_if value="not $fromShip.isclass.ship">
                    <show_help custom="'Source is not a ship! Improper action.'" position="1" duration="3s" chance="0" />
                    <cancel_cue cue="this" />
                </do_if>

                <!--show_help custom="'Syncing orders from ' + $fromShip.knownname + ' to ' + $toShip.knownname" position="1" duration="4s" /-->

                <!-- Caching to allow faster script execution. -->
                <set_value name="$assignmentSkillLevel" exact="[$fromShip.pilot.skill.management, $toShip.pilot.skill.piloting].max / 3" comment="The 'skill level' designated by vanilla game, if it were to assign a ship to a station." />
                <set_value name="$fromShip_DefaultOrder" exact="$fromShip.defaultorder" />

                <!--
                Note to self:
                Suppose the Commander is operating at Skill Level 2. (Denoted as SL-2)
                There exists cases where the joining ship can operate at (e.g.) SL-5.
                    In such cases, set the joining ship to operate at SL-2, same as Commander. It's natural.
                There also exists cases where the joining ship can only operate at (e.g.) SL-1 (or even lower).
                    This can occur when the Commander has exceptionally crappy Management skill, and the Subordinate having crappy Piloting skill too.
                    (This does not guarantee that the Commander also has crappy Piloting skill! Overall skill can still be good!)
                    The UI will explode if we attempt to set it to SL-2, so in such cases, set it at SL-1 (i.e., max capable).
                -->
                <do_if value="$toShip.assignment == assignment.mining">
                    <!-- Even though there are several different versions of mining scripts, they all have the same list of parameters. -->
                    <set_value name="$inputOrder" exact="$fromShip_DefaultOrder" />
                    <include_actions ref="CheckOrderIsMining" comment="Returns $isMiningOrder" />

                    <do_if value="$isMiningOrder">
                        <!-- Vanilla * AutoMine behavior -->
                        <!-- First obtain the MAX parameters, cap them to valid values. -->
                        <set_value name="$maxBuy" exact="[$fromShip_DefaultOrder.$maxbuy, $assignmentSkillLevel].min" />
                        <set_value name="$maxSell" exact="[$fromShip_DefaultOrder.$maxsell, $assignmentSkillLevel].min" />

                        <!-- Then obtain and cap the MIN parameters -->
                        <set_value name="$minBuy" exact="[$fromShip_DefaultOrder.$minbuy, $maxBuy].min" />
                        <set_value name="$minSell" exact="[$fromShip_DefaultOrder.$minsell, $maxSell].min" />
                        
                        <!-- As to the 'effective skill' parameter... -->
                        <!-- ge: greater than or equal to -->
                        <set_value name="$combinedSkill" />
                        <do_if value="$fromShip.combinedskill ge $toShip.combinedskill">
                            <!-- If commander is better than subordinate, subordinate can do it themselves. -->
                            <set_value name="$combinedSkill" exact="$toShip.combinedskill"/>
                        </do_if>
                        <do_else>
                            <!-- Take average otherwise. -->
                            <set_value name="$combinedSkill" exact="($fromShip.combinedskill + $toShip.combinedskill) / 2"/>
                        </do_else>

                        <create_order object="$toShip" id="'MiningRoutine'" default="true">
                            <!-- In v2.5, only maxbuy and maxsell can be modified by the user. -->
                            <!-- Hence, configuring minbuy and minsell becomes meaningless. -->
                            <param name="warebasket" value="$fromShip_DefaultOrder.$warebasket" />
                            <param name="range" value="$fromShip_DefaultOrder.range" />
                            <param name="minbuy" value="$minBuy" />
                            <param name="minsell" value="$minSell" />
                            <param name="maxbuy" value="$maxBuy" />
                            <param name="maxsell" value="$maxSell" />
                            <param name="effectiveskill" value="$combinedSkill" />
                        </create_order>
                        <set_order_syncpoint_reached order="$toShip.order"/>
                    </do_if>
                </do_if>
                <do_elseif value="$toShip.assignment == assignment.trade">
                    <!-- Make sure the fromShip really is trading -->
                    <do_if value="$fromShip_DefaultOrder.id == 'TradeRoutine'">
                        <!-- Vanilla AutoTrade behavior -->
                        <set_value name="$maxBuy" exact="[$fromShip_DefaultOrder.$maxbuy, $assignmentSkillLevel].min" />
                        <set_value name="$maxSell" exact="[$fromShip_DefaultOrder.$maxsell, $assignmentSkillLevel].min" />

                        <create_order object="$toShip" id="'TradeRoutine'" default="true">
                            <!-- In v2.5, only maxbuy and maxsell can be modified by the user. -->
                            <!-- Hence, configuring minbuy and minsell becomes meaningless. -->
                            <param name="warebasket" value="$fromShip_DefaultOrder.$warebasket" />
                            <param name="range" value="$fromShip_DefaultOrder.$range" />
                            <param name="maxbuy" value="$maxBuy" />
                            <param name="maxsell" value="$maxSell" />
                        </create_order>
                        <set_order_syncpoint_reached order="$toShip.order"/>
                    </do_if>
                    <do_elseif value="$fromShip_DefaultOrder.id == 'Middleman'">
                        <!-- Vanilla Distribute Wares behavior -->
                        <create_order object="$toShip" id="'Middleman'" default="true">
                            <!-- In v2.5, only warebasket can be modified by the player. -->
                            <param name="warebasket" value="$fromShip_DefaultOrder.$warebasket" />
                            <param name="anchorspace" value="$fromShip_DefaultOrder.$anchorspace" />
                        </create_order>
                        <set_order_syncpoint_reached order="$toShip.order"/>
                    </do_elseif>
                    <do_elseif value="$fromShip_DefaultOrder.id == 'TaterTrade'">
                        <!-- Mod TaterTrade: TaterTrade behavior -->
                        <set_value name="$maxBuy" exact="[$fromShip_DefaultOrder.$maxbuy, $assignmentSkillLevel].min" />
                        <set_value name="$maxSell" exact="[$fromShip_DefaultOrder.$maxsell, $assignmentSkillLevel].min" />

                        <!-- Wow, there's a lot of parameters here... -->
                        <create_order object="$toShip" id="'TaterTrade'" default="true">
                            <!-- Section break 0: General config -->
                            <param name="home" value="$fromShip_DefaultOrder.$home" />
                            <param name="returnhome" value="$fromShip_DefaultOrder.$returnhome" />
                            <param name="maxbuy" value="$maxBuy" />
                            <param name="maxsell" value="$maxSell" />
                            <param name="distancecheck" value="$fromShip_DefaultOrder.$distancecheck" />
                            <param name="discount" value="$fromShip_DefaultOrder.$discount" />
                            <param name="discount2" value="$fromShip_DefaultOrder.$discount2" />
                            <param name="bypass" value="$fromShip_DefaultOrder.$bypass" />
                            <param name="fasttrade" value="$fromShip_DefaultOrder.$fasttrade" />
                            <param name="stationmode" value="$fromShip_DefaultOrder.$stationmode" />
                            <param name="blackmarket" value="$fromShip_DefaultOrder.$blackmarket" />
                            <!-- Section break 1: Trade ware config -->
                            <param name="warebasket" value="$fromShip_DefaultOrder.$warebasket" />
                            <param name="usepresets" value="$fromShip_DefaultOrder.$usepresets" />
                            <param name="allwares" value="$fromShip_DefaultOrder.$allwares" />
                            <param name="legalwares" value="$fromShip_DefaultOrder.$legalwares" />
                            <param name="illegalwares" value="$fromShip_DefaultOrder.$illegalwares" />
                            <param name="shipbuildingwares" value="$fromShip_DefaultOrder.$shipbuildingwares" />
                            <param name="stationbuildingwares" value="$fromShip_DefaultOrder.$stationbuildingwares" />
                            <param name="hightechwares" value="$fromShip_DefaultOrder.$hightechwares" />
                            <param name="refinedwares" value="$fromShip_DefaultOrder.$refinedwares" />
                            <param name="biowares" value="$fromShip_DefaultOrder.$biowares" />
                            <!-- Section break 2: Sector Black/White Lists -->
                            <param name="excludedsectors" value="$fromShip_DefaultOrder.$excludedsectors" />
                            <param name="includedsectors" value="$fromShip_DefaultOrder.$includedsectors" />
                            <!-- Section break 3: Trading partner blacklists -->
                            <param name="enablebans" value="$fromShip_DefaultOrder.$enablebans" />
                            <param name="playerban" value="$fromShip_DefaultOrder.$playerban" />
                            <param name="argonban" value="$fromShip_DefaultOrder.$argonban" />
                            <param name="antigoneban" value="$fromShip_DefaultOrder.$antigoneban" />
                            <param name="teladiban" value="$fromShip_DefaultOrder.$teladiban" />
                            <param name="ministryban" value="$fromShip_DefaultOrder.$ministryban" />
                            <param name="paranidban" value="$fromShip_DefaultOrder.$paranidban" />
                            <param name="holyorderban" value="$fromShip_DefaultOrder.$holyorderban" />
                            <param name="allianceban" value="$fromShip_DefaultOrder.$allianceban" />
                            <param name="hatikvahban" value="$fromShip_DefaultOrder.$hatikvahban" />
                            <param name="scaleplateban" value="$fromShip_DefaultOrder.$scaleplateban" />
                            <!-- Section break 4: Miscellaneous-->
                            <param name="scanspeed" value="$fromShip_DefaultOrder.$scanspeed" />
                        </create_order>
                        <set_order_syncpoint_reached order="$toShip.order"/>
                         
                    </do_elseif>
                </do_elseif>
                <do_else>
                    <debug_text text="'Assignment unrecognized by CivFleet. Cancelling sync from ' + $fromShip.knownname + ' (' + $fromShip + ') to ' + $toShip.knownname + ' (' + $toShip + ') via assignment ' + $toShip.assignment + '.'" />
                </do_else>
            </actions>
        </cue>

        <!-- Given an order (more precisely, a defaultorder), determines if such order is a mining order. -->
        <!-- input: $inputOrder, output: $isMiningOrder -->
        <library name="CheckOrderIsMining">
            <actions>
                <set_value name="$isMiningOrder" exact="false" />
                <set_value name="$orderID" exact="$inputOrder.id" />
                <do_if value="$orderID != null">
                    <do_if value="$orderID == 'MiningRoutine' or $orderID == 'MiningRoutine_Basic' or $orderID == 'MiningRoutine_Advanced' or $orderID == 'MiningRoutine_Expert'">
                        <set_value name="$isMiningOrder" exact="true" />
                    </do_if>
                </do_if>
                <remove_value name="$orderID" />
            </actions>
        </library>
    </cues>
</mdscript><?xml version="1.0" encoding="utf-8" ?>
<mdscript name="V1024_CivilianFleets" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <cue name="Register_CivilianFleets_RightClickMenu" version="1">
      <conditions>
        <event_cue_completed cue="md.Right_click_api.RegisterRight_click_api"/>
      </conditions>
      <delay exact="1s" comment="wait a sec if we have dependencies"/>
      <actions>
        <raise_lua_event name="'RegisterAddon'" param="'extensions.v1024_civilian_fleets.civilian_fleets'"/>
      </actions>
    </cue>
    <cue name="CivilianFleets_Feedback_Wanted">
      <conditions>
        <event_cue_completed cue="Register_CivilianFleets_RightClickMenu"/>
      </conditions>
      <actions>
        <reset_cue cue="Register_CivilianFleets_RightClickMenu"/>
        <reset_cue cue="CivilianFleets_Feedback_Wanted"/>
      </actions>
    </cue>
    <cue name="CivilianFleets_SettingUp" instantiate="true">
      <conditions>
        <event_cue_signalled cue="md.Setup.Start" />
      </conditions>
      <actions>
        <!-- Safety -->
        <remove_value name="global.$civFleet_CmdTagPairs"/>

        <!-- Setting the value pairs -->
        <set_value name="global.$civFleet_CmdTagPairs" exact="[]" />

        <!-- Hardcoded inputting -->
        <!-- Vanilla value-pairs -->
        <append_to_list name="global.$civFleet_CmdTagPairs" exact="['TradeRoutine', 'Trading fleet']" />
        <append_to_list name="global.$civFleet_CmdTagPairs" exact="['MiningRoutine', 'Mining fleet']" />
        <append_to_list name="global.$civFleet_CmdTagPairs" exact="['MiningRoutine_Basic', 'Mining fleet']" />
        <append_to_list name="global.$civFleet_CmdTagPairs" exact="['MiningRoutine_Advanced', 'Mining fleet']" />
        <append_to_list name="global.$civFleet_CmdTagPairs" exact="['MiningRoutine_Expert', 'Mining fleet']" />
        <append_to_list name="global.$civFleet_CmdTagPairs" exact="['Middleman', 'Distribution fleet']" />

        <!-- Mod value-pairs -->
        <append_to_list name="global.$civFleet_CmdTagPairs" exact="['TaterTrade', 'TaterTrade fleet']" />

				<!-- To make sub-mods for this mod, simply append to the above list after this cue is complete. -->
      </actions>
    </cue>
  </cues>
</mdscript>