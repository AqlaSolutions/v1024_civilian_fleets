<?xml version="1.0" encoding="utf-8" ?>
<!-- 
Whenever a ship tries to obtain "first" orders...
1. Because it has just been freshly constructed (NOT OUR MAIN POINT)
2. Because it has just received a new assignment
Do:
1. Check if it is a ship-to-ship assignment (passively checked as a result of original code structure)
2. Check if it is being assigned to another ship running a recognized civilian command
3. If [2] returns true, syncs the civilian command from the commander to itself
4. If [2] returns true, also updates the wing name appropriately
-->
<diff>
    <add sel="/aiscript[@name='lib.request.orders']/attention/actions/do_else/do_else" pos="before">
        <!-- At this point, definitely assigning to another ship, no need to double-check. -->

        <show_help position="1" duration="2s" custom="'Right click API status: ' + global.$v1024_flags_hasRightClickAPI"/>
        <!-- Case: Right Click API successfully loaded and assigning ships to civilian fleets -->
        <do_elseif value="$assignment == assignment.trade or $assignment == assignment.mining or (not global.$v1024_flags_hasRightClickAPI)">
            <show_help position="1" duration="6s" custom="'Signalling the previous-made handler.'"/>
            <set_value name="$flag_v1024_civfleetformed" exact="true" comment="Actual value not important." />
            <!-- Delegate to standardized static config method to ensure save-game compatibility. -->
            <signal_objects object="player.galaxy" param="global.$v1024_symbols_requestOrderSync" param2="$commander" param3="$object" />
        </do_elseif>
        <!-- Case: Right Click API failed to load but civilian fleets still wanted -->
        <do_elseif value="not global.$v1024_flags_hasRightClickAPI" comment="See if the global flag is set">
            <show_help position="1" duration="6s" custom="'Custom handler'"/>
            <!-- Analyze: is it legitimate potential civ-fleet assignment? -->
            <do_if value="$object.primarypurpose == purpose.mine and $commander.primarypurpose == purpose.mine">
                <!-- Surrogate mining fleet assignment. -->
                <set_object_commander object="$object" commander="$commander" assignment="assignment.mining"/>
                <run_script name="'lib.request.orders'">
                    <param name="object" value="$object"/>
                </run_script>
            </do_if>
            <do_elseif value="$object.primarypurpose == purpose.trade and $commander.primarypurpose == purpose.trade">
                <!-- Surrogate trading fleet assignment. -->
                <set_object_commander object="$object" commander="$commander" assignment="assignment.trade"/>
                <run_script name="'lib.request.orders'">
                    <param name="object" value="$object"/>
                </run_script>
            </do_elseif>
            <do_else>
                <!-- Assignment failed. Use dumb-default order. -->
                <create_order object="$object" id="'Follow'" default="true">
                    <param name="target" value="$commander" />
                </create_order>
            </do_else>
        </do_elseif>
    </add>

    <!-- Rename wing if wing is civilian fleet -->
    <add sel="/aiscript[@name='lib.request.orders']/attention/actions/do_else/do_else" pos="after">
        <!-- Optimization: only attempt to rename fleet when we have actually formed any civ-fleets. -->
        <do_if value="$flag_v1024_civfleetformed?">
            <!-- Only the player can initiate illegal assignment as trader or miner. So we're pretty safe. -->
            <!-- Delegate to standardized static fleet wing rename method. -->
			<!-- Using run_script because this operation should take an instant, and no player would be quick enough to save the game while the assignment is in progress. -->
            <run_script name="'lib.civfleet.update.wingname'">
                <param name="wingCommander" value="$commander" />
            </run_script>
        </do_if>
    </add>
</diff>